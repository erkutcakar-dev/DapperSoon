@model dynamic

@{
    ViewData["Title"] = "Football Stats Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="main-panel">
    <div class="content-wrapper">
        <div class="row">
            <div class="col-12 grid-margin">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Football Statistics Dashboard</h4>
                        <p class="card-description">Comprehensive overview of football statistics and performance metrics</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Widgets Row -->
        <div class="row">
            @foreach (var widget in Model.Widgets)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 grid-margin stretch-card">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-9">
                                    <div class="d-flex align-items-center align-self-start">
                                        <h3 class="mb-0">@widget.Value</h3>
                                        <p class="text-success ml-2 mb-0 font-weight-medium">@widget.Description</p>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <div class="icon icon-box-@widget.Color">
                                        <i class="@widget.Icon"></i>
                                    </div>
                                </div>
                            </div>
                            <h6 class="text-muted font-weight-normal">@widget.WidgetName</h6>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Charts Row -->
        <div class="row">
            <!-- Top Scorers Chart -->
            <div class="col-md-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Top Scorers</h4>
                        <canvas id="topScorersChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Team Statistics Chart -->
            <div class="col-md-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4 class="card-title mb-0">Team Statistics Overview</h4>
                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#teamStatsModal">
                                <i class="mdi mdi-filter-variant"></i> View Details
                            </button>
                        </div>
                        <div class="chartjs-size-monitor">
                            <div class="chartjs-size-monitor-expand"><div class=""></div></div>
                            <div class="chartjs-size-monitor-shrink"><div class=""></div></div>
                        </div>
                        <canvas id="teamStatsChart" style="height: 350px; display: block;" class="chartjs-render-monitor"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Team Stats and League Stats Row -->
        <div class="row">
            <!-- Team Stats Table -->
            <div class="col-md-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Team Statistics</h4>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Team</th>
                                        <th>Goals</th>
                                        <th>Points</th>
                                        <th>Games</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var team in Model.TeamStatsTop10)
                                    {
                                        <tr>
                                            <td>@team.TeamName</td>
                                            <td>@team.Goals</td>
                                            <td>@team.Points</td>
                                            <td>@team.GamesPlayed</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- League Stats -->
            <div class="col-md-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4 class="card-title mb-0">League Statistics</h4>
                            <form method="get" class="d-flex align-items-center">
                                <select name="selectedSeason" class="form-control form-control-sm" style="width: auto;" onchange="this.form.submit()">
                                    <option value="">All Seasons</option>
                                    @foreach (var season in Model.AvailableSeasons)
                                    {
                                        <option value="@season" selected="@(Model.SelectedSeason == season)">@season</option>
                                    }
                                </select>
                            </form>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>League</th>
                                        <th>Season</th>
                                        <th>Games</th>
                                        <th>Goals</th>
                                        <th>Avg Goals</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var league in Model.LeagueStats)
                                    {
                                        <tr>
                                            <td>@league.LeagueName</td>
                                            <td><span class="badge badge-info">@league.Season</span></td>
                                            <td>@league.TotalGames</td>
                                            <td>@league.TotalGoals</td>
                                            <td>@league.AverageGoalsPerGame.ToString("F1")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Team Performance Table -->
        
    </div>
</div>

<!-- Team Statistics Modal -->
<div class="modal fade" id="teamStatsModal" tabindex="-1" role="dialog" aria-labelledby="teamStatsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="teamStatsModalLabel">Team Statistics Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="seasonSelect" class="form-label">Select Season:</label>
                        <select id="seasonSelect" class="form-control" onchange="loadTeamStatsForSeason()">
                            <option value="">All Seasons</option>
                            @foreach (var season in Model.AvailableSeasons)
                            {
                                <option value="@season">@season</option>
                            }
                        </select>
                    </div>
                </div>
                <div id="teamStatsTableContainer">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Team</th>
                                    <th>Goals</th>
                                    <th>Shots</th>
                                    <th>Shots On Target</th>
                                    <th>Fouls</th>
                                    <th>Red Cards</th>
                                </tr>
                            </thead>
                            <tbody id="teamStatsTableBody">
                                @foreach (var team in Model.TeamPerformance)
                                {
                                    <tr>
                                        <td><strong>@team.TeamName</strong></td>
                                        <td><span class="badge badge-success">@team.Goals</span></td>
                                        <td>@team.Shots</td>
                                        <td><span class="badge badge-info">@team.ShotsOnTarget</span></td>
                                        <td>@team.Fouls</td>
                                        <td><span class="badge badge-danger">@team.RedCards</span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Top Scorers Chart
        const topScorersData = @Html.Raw(Json.Serialize(Model.TopScorersChartData));
        const topScorersCtx = document.getElementById('topScorersChart').getContext('2d');
        new Chart(topScorersCtx, {
            type: 'bar',

            data: {
                labels: topScorersData.map(p => p.name),
                datasets: [{
                    label: 'Goals',
                    data: topScorersData.map(p => p.goals),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Goals vs xGoals Scatter Chart
        const goalsVsXGoalsData = @Html.Raw(Json.Serialize(Model.GoalsVsXGoals));
        const goalsVsXGoalsCtx = document.getElementById('goalsVsXGoalsChart').getContext('2d');
        new Chart(goalsVsXGoalsCtx, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Players',
                    data: goalsVsXGoalsData.map(p => ({ x: p.x, y: p.y })),
                    backgroundColor: 'rgba(255, 99, 132, 0.6)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Goals'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Expected Goals'
                        }
                    }
                }
            }
        });

        // Team Statistics Doughnut Chart
        const teamStatsData = @Html.Raw(Json.Serialize(Model.TeamPerformanceChartData));
        const teamStatsCtx = document.getElementById('teamStatsChart').getContext('2d');
        
        var teamStatsDoughnutData = {
            datasets: [{
                data: teamStatsData.map(t => t.goals),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(255, 206, 86, 0.5)',
                    'rgba(75, 192, 192, 0.5)',
                    'rgba(153, 102, 255, 0.5)',
                    'rgba(255, 159, 64, 0.5)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 2
            }],
            labels: teamStatsData.map(t => t.teamName)
        };
        
        var teamStatsDoughnutOptions = {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                animateScale: true,
                animateRotate: true
            },
            cutout: '60%',
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 20,
                        usePointStyle: true
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return context.label + ': ' + context.parsed + ' goals';
                        }
                    }
                }
            }
        };
        
        new Chart(teamStatsCtx, {
            type: 'doughnut',
            data: teamStatsDoughnutData,
            options: teamStatsDoughnutOptions
        });

        // Function to load team stats for selected season
        function loadTeamStatsForSeason() {
            const season = document.getElementById('seasonSelect').value;
            
            fetch(`/Stats?selectedSeason=${season}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(response => response.text())
            .then(data => {
                // Update the modal table container
                document.getElementById('teamStatsTableContainer').innerHTML = data;
            })
            .catch(error => {
                console.error('Error loading team stats:', error);
                document.getElementById('teamStatsTableContainer').innerHTML = 
                    '<div class="alert alert-danger">Error loading data. Please try again.</div>';
            });
        }

        // Update sidebar with team performance info
        function updateSidebarTeamPerformanceInfo() {
            const startEntry = @((Model.TeamPerformancePageNumber - 1) * Model.TeamPerformancePageSize + 1);
            const endEntry = @(Math.Min(Model.TeamPerformancePageNumber * Model.TeamPerformancePageSize, Model.TeamPerformanceTotalCount));
            const totalEntries = @Model.TeamPerformanceTotalCount;
            
            const infoText = `Showing ${startEntry} to ${endEntry} of ${totalEntries} entries`;
            const sidebarInfo = document.getElementById('sidebarTeamPerformanceInfo');
            if (sidebarInfo) {
                sidebarInfo.innerHTML = `<small class="text-muted">${infoText}</small>`;
            }
        }

        // Scroll to team performance section
        function scrollToTeamPerformance() {
            const element = document.getElementById('teamPerformanceSection');
            if (element) {
                element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }

        // Initialize sidebar info on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateSidebarTeamPerformanceInfo();
        });
    </script>
}
